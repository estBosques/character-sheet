// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface Races {
	_meta: Meta;
	race: Race[];
	subrace: Subrace[];
}

export interface Meta {
	internalCopies: string[];
}

export interface Race {
	name: string;
	source: string;
	page: number;
	size?: Size[];
	speed?: PurpleSpeed | number | string;
	ability?: AbilityClass[];
	traitTags?: string[] | null;
	languageProficiencies?: RaceLanguageProficiency[];
	entries?: Array<PurpleEntry | string>;
	otherSources?: Source[];
	reprintedAs?: string[];
	age?: Age;
	soundClip?: SoundClip;
	hasFluff?: boolean;
	hasFluffImages?: boolean;
	lineage?: boolean | LineageEnum;
	additionalSpells?: RaceAdditionalSpell[];
	darkvision?: number;
	resist?: Array<ResistClass | string>;
	_versions?: RaceVersion[];
	heightAndWeight?: HeightAndWeight | null;
	skillProficiencies?: RaceSkillProficiency[];
	creatureTypes?: Array<CreatureType | string>;
	creatureTypeTags?: string[];
	toolProficiencies?: RaceToolProficiency[];
	conditionImmune?: ConditionImmune[];
	_copy?: Copy;
	feats?: Feat[];
	srd?: boolean;
	basicRules?: boolean;
	weaponProficiencies?: WeaponProficiency[];
	additionalSources?: Source[];
	blindsight?: number;
	immune?: Immune[];
	armorProficiencies?: RaceArmorProficiency[];
	vulnerable?: string[];
}

export interface Copy {
	name: string;
	source: string;
	_mod: CopyMod;
	_preserve?: Preserve;
}

export interface CopyMod {
	entries: Entr[] | Entr;
}

export interface Entr {
	mode: Mode;
	replace?: string;
	items?: Items;
	names?: string;
}

export interface Items {
	name: string;
	type: ItemsType;
	entries: string[];
}

export enum ItemsType {
	Entries = 'entries',
	Inset = 'inset',
	List = 'list',
	Table = 'table'
}

export enum Mode {
	AppendArr = 'appendArr',
	RemoveArr = 'removeArr',
	ReplaceArr = 'replaceArr'
}

export interface Preserve {
	reprintedAs: boolean;
}

export interface RaceVersion {
	name?: string;
	source?: PurpleSource;
	_mod?: VersionMod;
	skillProficiencies?: null;
	darkvision?: null;
	_template?: Template;
	_implementations?: PurpleImplementation[];
	additionalSpells?: null;
}

export interface PurpleImplementation {
	_variables: PurpleVariables;
	resist?: string[];
}

export interface PurpleVariables {
	color: string;
	damageType: string;
}

export interface VersionMod {
	entries: Entr;
}

export interface Template {
	name: string;
	source: string;
	_mod: TemplateMod;
}

export interface TemplateMod {
	entries: Entr[];
}

export enum PurpleSource {
	Mpmm = 'MPMM',
	Tce = 'TCE'
}

export interface AbilityClass {
	dex?: number;
	wis?: number;
	cha?: number;
	choose?: AbilityChooseClass;
	str?: number;
	int?: number;
	con?: number;
}

export interface AbilityChooseClass {
	from: FromElement[];
	count?: number;
	amount?: number;
}

export enum FromElement {
	Cha = 'cha',
	Con = 'con',
	Dex = 'dex',
	Int = 'int',
	Str = 'str',
	Wis = 'wis'
}

export interface Source {
	source: string;
	page?: number;
}

export interface RaceAdditionalSpell {
	innate?: { [key: string]: string[] | PurpleInnate };
	ability?: CreatureType | FromElement;
	known?: PurpleKnown;
}

export interface CreatureType {
	choose: CreatureTypeChoose[];
}

export enum CreatureTypeChoose {
	Cha = 'cha',
	Construct = 'construct',
	Int = 'int',
	Undead = 'undead',
	Wis = 'wis'
}

export interface PurpleInnate {
	daily: Daily;
}

export interface Daily {
	'1': string[];
}

export interface PurpleKnown {
	'1'?: string[] | Purple1;
	_?: Known[];
}

export interface Purple1 {
	rest?: Daily;
	ritual?: string[];
}

export interface Known {
	choose: string;
	count: number;
}

export interface Age {
	mature?: number;
	max: number;
}

export interface RaceArmorProficiency {
	light: boolean;
}

export enum ConditionImmune {
	Disease = 'disease',
	Exhaustion = 'exhaustion',
	Poisoned = 'poisoned'
}

export interface PurpleEntry {
	name?: string;
	entries?: Array<FluffyEntry | string>;
	type: ItemsType;
	style?: Style;
	items?: ItemClass[];
	data?: Data;
}

export interface Data {
	overwrite: string;
}

export interface FluffyEntry {
	type: ItemsType;
	items?: Array<ItemClass | string>;
	style?: Style;
	caption?: string;
	colLabels?: string[];
	colStyles?: string[];
	rows?: Array<string[]>;
	name?: string;
	entries?: Array<TentacledEntry | string>;
}

export interface TentacledEntry {
	type: ItemsType;
	style: string;
	items: ItemClass[];
}

export interface ItemClass {
	type: ItemType;
	name: string;
	entry?: string;
	entries?: string[];
}

export enum ItemType {
	Item = 'item',
	ItemSpell = 'itemSpell'
}

export enum Style {
	ListHangNotitle = 'list-hang-notitle'
}

export interface Feat {
	any: number;
}

export interface HeightAndWeight {
	baseHeight: number;
	heightMod: HeightMod;
	baseWeight: number;
	weightMod?: string;
}

export enum HeightMod {
	The1D10 = '1d10',
	The2D10 = '2d10',
	The2D12 = '2d12',
	The2D4 = '2d4',
	The2D6 = '2d6',
	The2D8 = '2d8'
}

export enum Immune {
	Acid = 'acid',
	Cold = 'cold',
	Fire = 'fire',
	Lightning = 'lightning',
	Necrotic = 'necrotic',
	Poison = 'poison'
}

export interface RaceLanguageProficiency {
	auran?: boolean;
	common?: boolean;
	other?: boolean;
	celestial?: boolean;
	anyStandard?: number;
	goblin?: boolean;
	sylvan?: boolean;
	draconic?: boolean;
	dwarvish?: boolean;
	elvish?: boolean;
	giant?: boolean;
	primordial?: boolean;
	gnomish?: boolean;
	terran?: boolean;
	undercommon?: boolean;
	orc?: boolean;
	halfling?: boolean;
	aquan?: boolean;
	choose?: LanguageProficiencyChoose;
	infernal?: boolean;
	abyssal?: boolean;
}

export interface LanguageProficiencyChoose {
	from: string[];
	count?: number;
}

export enum LineageEnum {
	Ua1 = 'UA1',
	Vrgr = 'VRGR'
}

export interface ResistClass {
	choose: ResistChoose;
}

export interface ResistChoose {
	from: string[];
}

export enum Size {
	M = 'M',
	S = 'S',
	V = 'V'
}

export interface RaceSkillProficiency {
	intimidation?: boolean;
	perception?: boolean;
	stealth?: boolean;
	choose?: LanguageProficiencyChoose;
	survival?: boolean;
	deception?: boolean;
	any?: number;
	athletics?: boolean;
	acrobatics?: boolean;
	performance?: boolean;
	persuasion?: boolean;
}

export interface SoundClip {
	type: SoundClipType;
	path: string;
}

export enum SoundClipType {
	Internal = 'internal'
}

export interface PurpleSpeed {
	walk: number;
	fly?: boolean | number;
	swim?: boolean | number;
	climb?: boolean | number;
}

export interface RaceToolProficiency {
	any?: number;
	'musical instrument'?: boolean;
}

export interface WeaponProficiency {
	'battleaxe|phb'?: boolean;
	'handaxe|phb'?: boolean;
	'light hammer|phb'?: boolean;
	'warhammer|phb'?: boolean;
	'longsword|phb'?: boolean;
	'shortsword|phb'?: boolean;
	'shortbow|phb'?: boolean;
	'longbow|phb'?: boolean;
	firearms?: boolean;
	choose?: WeaponProficiencyChoose;
	'spear|phb'?: boolean;
	'javelin|phb'?: boolean;
}

export interface WeaponProficiencyChoose {
	fromFilter: string;
	count: number;
}

export interface Subrace {
	name?: string;
	source: string;
	raceName: string;
	raceSource: string;
	page: number;
	ability?: AbilityClass[];
	entries?: Array<StickyEntry | string>;
	hasFluff?: boolean;
	hasFluffImages?: boolean;
	skillProficiencies?: SubraceSkillProficiency[] | null;
	srd?: boolean;
	_versions?: SubraceVersion[];
	darkvision?: number;
	resist?: Immune[] | null;
	overwrite?: Overwrite;
	otherSources?: Source[];
	reprintedAs?: string[];
	traitTags?: string[];
	languageProficiencies?: SubraceLanguageProficiency[];
	additionalSpells?: SubraceAdditionalSpell[] | null;
	basicRules?: boolean;
	heightAndWeight?: HeightAndWeight;
	armorProficiencies?: SubraceArmorProficiency[];
	speed?: FluffySpeed | number;
	alias?: string[];
	weaponProficiencies?: { [key: string]: boolean }[];
	skillToolLanguageProficiencies?: SkillToolLanguageProficiency[];
	age?: Age;
	soundClip?: SoundClip;
	toolProficiencies?: SubraceToolProficiency[];
	feats?: Feat[];
}

export interface SubraceVersion {
	_template?: Template;
	_implementations?: FluffyImplementation[];
	name?: string;
	source?: string;
	_mod?: VersionMod;
	speed?: number;
	skillProficiencies?: null;
	additionalSpells?: null;
	weaponProficiencies?: null;
}

export interface FluffyImplementation {
	_variables: FluffyVariables;
	resist?: Immune[];
}

export interface FluffyVariables {
	color: string;
	damageType: Immune;
	area: Area;
	savingThrow: SavingThrow;
}

export enum Area {
	The15FootCone = '15-foot cone',
	The5FootWide30FootLongLine = '5-foot-wide, 30-foot-long line'
}

export enum SavingThrow {
	Constitution = 'Constitution',
	Dexterity = 'Dexterity'
}

export interface SubraceAdditionalSpell {
	innate?: { [key: string]: string[] | FluffyInnate };
	ability?: CreatureType | FromElement;
	expanded?: Expanded;
	known?: FluffyKnown;
}

export interface Expanded {
	s1: string[];
	s2: string[];
	s3: string[];
	s4: string[];
	s5: string[];
}

export interface FluffyInnate {
	daily?: Daily;
	rest?: Daily;
}

export interface FluffyKnown {
	'1': string[] | Fluffy1;
}

export interface Fluffy1 {
	rest?: Daily;
	_?: The1__[];
}

export interface The1__ {
	choose: Choose;
}

export enum Choose {
	Level0ClassBard = 'level=0|class=Bard',
	Level0ClassDruid = 'level=0|class=Druid',
	Level0ClassWizard = 'level=0|class=Wizard'
}

export interface SubraceArmorProficiency {
	light: boolean;
	medium: boolean;
}

export interface StickyEntry {
	name: string;
	entries: Array<IndigoEntry | string>;
	type: ItemsType;
	data?: Data;
}

export interface IndigoEntry {
	type: ItemsType;
	caption?: string;
	colLabels?: string[];
	colStyles?: string[];
	rows?: Array<string[]>;
	style?: Style;
	items?: ItemClass[];
	name?: string;
	entries?: string[];
}

export interface SubraceLanguageProficiency {
	common?: boolean;
	dwarvish?: boolean;
	undercommon?: boolean;
	auran?: boolean;
	sylvan?: boolean;
	elvish?: boolean;
	anyStandard?: number;
	aquan?: boolean;
	gnomish?: boolean;
	goblin?: boolean;
	other?: boolean;
	abyssal?: boolean;
}

export interface Overwrite {
	ability?: boolean;
	traitTags?: boolean;
	languageProficiencies?: boolean;
	skillProficiencies?: boolean;
}

export interface SubraceSkillProficiency {
	perception?: boolean;
	'animal handling'?: boolean;
	any?: number;
	athletics?: boolean;
	survival?: boolean;
	intimidation?: boolean;
	history?: boolean;
	nature?: boolean;
	'sleight of hand'?: boolean;
	stealth?: boolean;
	deception?: boolean;
	persuasion?: boolean;
	acrobatics?: boolean;
}

export interface SkillToolLanguageProficiency {
	choose: LanguageProficiencyChoose[];
}

export interface FluffySpeed {
	walk: number;
	fly?: number;
	swim?: boolean | number;
}

export interface SubraceToolProficiency {
	anyArtisans: number;
}
